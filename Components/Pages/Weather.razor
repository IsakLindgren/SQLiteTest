@page "/weather"
@attribute [StreamRendering]
@inject HttpClient Http

<PageTitle>Database test</PageTitle>

<h1>Database test</h1>

@if (_filteredArticles == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <p>categorie filter</p>
  <InputText @bind-Value="filterString"/>
  <button @onclick="GetArticles">
        filter
  </button>

  <table class="table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Title</th>
        <th>Body</th>
        <th>Category</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var article in _filteredArticles)
      {
        <tr>
          <td>@article.Id</td>
          <td>@article.Title</td>
          <td>@article.Body</td>
          <td>@article.Category</td>
        </tr>
      }
    </tbody>

  </table>

  <EditForm Model="_article" OnSubmit="AddArticle"> 
      Title: <InputText @bind-Value="_article.Title"/>
      category: <InputText @bind-Value="_article.Category"/>
      Body: <InputText @bind-Value="_article.Body"/>
  </EditForm>

  <button @onclick="AddArticle">
      Add Article
  </button>
}

@code {
    private Article[]? _filteredArticles;
    private Article[]? _articles;
    private Article _article;
    private string filterString;
    protected override async Task OnInitializedAsync()
    {
        await GetArticles();
        _article = new();
    }

    protected async Task AddArticle()
    {
        //skapar ny article och postar till api adress

        // Article test = new Article();
        // test.Title = "testTitle";
        // test.Category = "TestCategory";
        // test.Body = "Test Body, bla bla bla";
        if (!string.IsNullOrEmpty(_article.Title) && !string.IsNullOrEmpty(_article.Body) && !string.IsNullOrEmpty(_article.Category))
        {
            await Http.PostAsJsonAsync("https://localhost:7179/api/article", _article);
        }

        _article = new();
        //hämtar och uppdaterar informationen
        await Task.Delay(100);
        await GetArticles();
        StateHasChanged();
    }

    protected async Task GetArticles()
    {
        _articles = await Http.GetFromJsonAsync<Article[]>("https://localhost:7179/api/article");
        if (string.IsNullOrEmpty(filterString))
        {
            _filteredArticles = _articles;
        }
        else
        {
            List<Article> tmp = new();
            foreach (var article in _articles)
            {
                if (article.Category == filterString)
                {
                    tmp.Add(article);
                }
            }
            _filteredArticles = tmp.ToArray();
        }
    }
}